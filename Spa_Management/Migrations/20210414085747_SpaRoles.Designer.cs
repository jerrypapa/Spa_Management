// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Spa_Management.Data;
using System;

namespace Spa_Management.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210414085747_SpaRoles")]
    partial class SpaRoles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Spa_Management.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<Guid>("bankUserGuid");

                    b.Property<Guid>("compUserGuid");

                    b.Property<Guid>("indGuid");

                    b.Property<Guid>("spaUserGuid");

                    b.Property<Guid>("userGuid");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Spa_Management.Models.Appointments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ReservationDate");

                    b.Property<Guid>("SpaCustomersId");

                    b.Property<Guid>("SpaDetailsId");

                    b.Property<Guid>("SpaServicesId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("SpaCustomersId");

                    b.HasIndex("SpaDetailsId");

                    b.HasIndex("SpaServicesId");

                    b.ToTable("Appointments_");
                });

            modelBuilder.Entity("Spa_Management.Models.BankAmmendmentMatrices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("FlatRate");

                    b.Property<Guid>("SystemBanksGuid");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<decimal>("perCom");

                    b.Property<string>("period");

                    b.Property<int>("status");

                    b.HasKey("Id");

                    b.HasIndex("SystemBanksGuid");

                    b.ToTable("BankAmmendmentMatrices");
                });

            modelBuilder.Entity("Spa_Management.Models.BankSetups", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BankId");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(800);

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasMaxLength(800);

                    b.Property<string>("Stamp")
                        .IsRequired()
                        .HasMaxLength(800);

                    b.Property<int>("Status");

                    b.Property<string>("letterHead")
                        .IsRequired()
                        .HasMaxLength(800);

                    b.HasKey("Id");

                    b.ToTable("TbBankSetups");
                });

            modelBuilder.Entity("Spa_Management.Models.BondPrintOptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("BondPrintOptions");
                });

            modelBuilder.Entity("Spa_Management.Models.CompanyDocs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdminComments");

                    b.Property<Guid>("ApplicantId");

                    b.Property<string>("BoardResolution")
                        .IsRequired()
                        .HasMaxLength(800);

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("Cr12")
                        .IsRequired()
                        .HasMaxLength(800);

                    b.Property<string>("PinCertificate")
                        .IsRequired()
                        .HasMaxLength(800);

                    b.Property<string>("RegistrationCertificate")
                        .IsRequired()
                        .HasMaxLength(800);

                    b.Property<int>("Status");

                    b.Property<bool>("Verified");

                    b.HasKey("Id");

                    b.ToTable("TbCompanyDocs");
                });

            modelBuilder.Entity("Spa_Management.Models.CompletedJobs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AppointmentsId");

                    b.Property<decimal>("BusinessRetainedShare");

                    b.Property<DateTime>("CompletionDate");

                    b.Property<string>("CustomerFeedback");

                    b.Property<int>("CustomerRating");

                    b.Property<decimal>("EmployeeShare");

                    b.Property<string>("PaymentReference");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentsId");

                    b.ToTable("CompletedJobs_");
                });

            modelBuilder.Entity("Spa_Management.Models.CrmIssueCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("CrmIssueCategory");
                });

            modelBuilder.Entity("Spa_Management.Models.CrmLogs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryCode");

                    b.Property<DateTime>("DateLogged");

                    b.Property<DateTime>("DateResolved");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4500);

                    b.Property<string>("EntityCategoryCode");

                    b.Property<Guid>("EntityId");

                    b.Property<int>("Status");

                    b.Property<string>("UserEmail");

                    b.Property<Guid>("UserId");

                    b.Property<string>("UserPhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("CrmLogs");
                });

            modelBuilder.Entity("Spa_Management.Models.EmailBroadCast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ApplicationId");

                    b.Property<DateTime>("DateLogged");

                    b.Property<DateTime>("DateSent");

                    b.Property<string>("Message");

                    b.Property<string>("RecipientEmail");

                    b.Property<bool>("Sent");

                    b.HasKey("Id");

                    b.ToTable("EmailBroadCast");
                });

            modelBuilder.Entity("Spa_Management.Models.EmployeePay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("CommisionPerJob");

                    b.Property<decimal>("GrossPay");

                    b.Property<Guid>("SpaUsersId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("SpaUsersId");

                    b.ToTable("EmployeePays_");
                });

            modelBuilder.Entity("Spa_Management.Models.MpesaPayments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountStatusDescription");

                    b.Property<string>("AccountStatusRespCode");

                    b.Property<Guid>("ApplicationId");

                    b.Property<string>("CheckoutRequestID");

                    b.Property<string>("CustomerMessage");

                    b.Property<string>("ErrorCode");

                    b.Property<string>("ErrorMessage");

                    b.Property<DateTime>("LogDate");

                    b.Property<string>("MerchantRequestID");

                    b.Property<bool>("Paid");

                    b.Property<string>("ResponseCode");

                    b.Property<string>("ResponseDescription");

                    b.HasKey("Id");

                    b.ToTable("MpesaPayments");
                });

            modelBuilder.Entity("Spa_Management.Models.PaymentOptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PaymentOptions");
                });

            modelBuilder.Entity("Spa_Management.Models.PostAmmendMentMatrix", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CheckerId");

                    b.Property<decimal>("FlatRate");

                    b.Property<Guid>("MakerId");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<decimal>("from");

                    b.Property<decimal>("perCom");

                    b.Property<string>("period");

                    b.Property<int>("status");

                    b.Property<decimal>("to");

                    b.HasKey("Id");

                    b.ToTable("PostAmmendMentMatrix");
                });

            modelBuilder.Entity("Spa_Management.Models.SpaCustomer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("IdNumber");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.ToTable("SpaCustomers_");
                });

            modelBuilder.Entity("Spa_Management.Models.SpaDetails", b =>
                {
                    b.Property<Guid>("spaGuid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PinNo")
                        .IsRequired();

                    b.Property<string>("PostalCode");

                    b.Property<string>("RegCertNo")
                        .IsRequired();

                    b.Property<string>("contact")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("email");

                    b.Property<string>("incNum");

                    b.Property<string>("postalAddress")
                        .IsRequired();

                    b.Property<string>("pysicalLoc")
                        .IsRequired();

                    b.Property<DateTime>("regDate");

                    b.Property<string>("registeredBy")
                        .IsRequired();

                    b.Property<string>("spaName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("status");

                    b.HasKey("spaGuid");

                    b.ToTable("SpaDetails");
                });

            modelBuilder.Entity("Spa_Management.Models.SpaRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleName");

                    b.Property<Guid>("SpaDetailsId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("SpaDetailsId");

                    b.ToTable("SpaRoles");
                });

            modelBuilder.Entity("Spa_Management.Models.SpaServices", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<decimal>("Price");

                    b.Property<string>("ServiceName");

                    b.Property<Guid>("SpaDetailsId");

                    b.HasKey("Id");

                    b.HasIndex("SpaDetailsId");

                    b.ToTable("SpaServices_");
                });

            modelBuilder.Entity("Spa_Management.Models.SpaUsers", b =>
                {
                    b.Property<Guid>("spaUserGuid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("LastName")
                        .HasMaxLength(25);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(25);

                    b.Property<string>("SirName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("contact")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<DateTime>("dob");

                    b.Property<string>("email")
                        .IsRequired();

                    b.Property<string>("idNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("idType");

                    b.Property<string>("pysicalLoc");

                    b.Property<DateTime>("regDate");

                    b.Property<Guid>("spaGuid");

                    b.Property<string>("spaRolesId");

                    b.Property<Guid?>("spaRolesId1");

                    b.Property<int>("status");

                    b.HasKey("spaUserGuid");

                    b.HasIndex("spaGuid");

                    b.HasIndex("spaRolesId1");

                    b.ToTable("SpaUsers");
                });

            modelBuilder.Entity("Spa_Management.Models.tbApplicationDocs", b =>
                {
                    b.Property<Guid>("applicationDocsGuid")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CRBGuid");

                    b.Property<string>("docPath")
                        .IsRequired()
                        .HasMaxLength(210);

                    b.Property<Guid>("docReqGuid");

                    b.Property<int>("status");

                    b.HasKey("applicationDocsGuid");

                    b.HasIndex("CRBGuid");

                    b.ToTable("TbApplicationDocs");
                });

            modelBuilder.Entity("Spa_Management.Models.tbApplications", b =>
                {
                    b.Property<Guid>("CRBGuid")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AcceptTerms");

                    b.Property<string>("ActionCode")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<decimal>("BankComm");

                    b.Property<int>("BidBondDocStatus");

                    b.Property<string>("BidBondPath");

                    b.Property<Guid>("BranchGuid");

                    b.Property<bool>("ClientPreviewApproved");

                    b.Property<bool>("ClientPrinted");

                    b.Property<string>("CoreBankingReferenceNumber");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(1500);

                    b.Property<string>("PIN")
                        .IsRequired();

                    b.Property<DateTime?>("PayDate");

                    b.Property<string>("PayRefrence");

                    b.Property<int>("Period");

                    b.Property<string>("PrintCode")
                        .HasMaxLength(25);

                    b.Property<string>("Purchaser")
                        .IsRequired();

                    b.Property<string>("QrCode");

                    b.Property<Guid>("SystemBanksGuid");

                    b.Property<string>("TenderPeriod")
                        .HasMaxLength(25);

                    b.Property<decimal>("amount");

                    b.Property<DateTime>("appDate");

                    b.Property<string>("appliedBy")
                        .IsRequired();

                    b.Property<DateTime?>("approvalDate");

                    b.Property<decimal>("approvedAmount");

                    b.Property<Guid>("approvedBy");

                    b.Property<DateTime>("bondStartDate");

                    b.Property<Guid>("checkedBy");

                    b.Property<string>("checkerComments")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("checkerDate");

                    b.Property<string>("comments")
                        .HasMaxLength(500);

                    b.Property<Guid>("compGuid");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<DateTime>("expireDate");

                    b.Property<Guid>("indGuid");

                    b.Property<int>("status");

                    b.Property<int?>("tbCurrenciesId");

                    b.Property<string>("tenderDocs")
                        .IsRequired()
                        .HasMaxLength(800);

                    b.Property<string>("tenderNo")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("terms");

                    b.HasKey("CRBGuid");

                    b.HasIndex("SystemBanksGuid");

                    b.HasIndex("tbCurrenciesId");

                    b.ToTable("TbApplications");
                });

            modelBuilder.Entity("Spa_Management.Models.tbAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("action")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("actionTime");

                    b.Property<string>("json");

                    b.Property<string>("page")
                        .HasMaxLength(100);

                    b.Property<string>("sessionId");

                    b.Property<string>("userID")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TbAudit");
                });

            modelBuilder.Entity("Spa_Management.Models.tbBankBranches", b =>
                {
                    b.Property<Guid>("BranchGuid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BankCollectionAccount");

                    b.Property<Guid>("SystemBanksGuid");

                    b.Property<string>("adrress")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("branchCode")
                        .IsRequired();

                    b.Property<string>("branchName")
                        .IsRequired();

                    b.Property<string>("physicalLoc")
                        .HasMaxLength(100);

                    b.Property<DateTime>("regDate");

                    b.Property<int>("status");

                    b.HasKey("BranchGuid");

                    b.HasIndex("SystemBanksGuid");

                    b.ToTable("TbBankBranches");
                });

            modelBuilder.Entity("Spa_Management.Models.tbBankUserAccessRights", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BankId");

                    b.Property<Guid>("MenuId");

                    b.Property<Guid>("RoleId");

                    b.Property<Guid?>("tbBankUserRolesId");

                    b.HasKey("Id");

                    b.HasIndex("tbBankUserRolesId");

                    b.ToTable("tbBankUserAccessRights");
                });

            modelBuilder.Entity("Spa_Management.Models.tbBankUserRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BankId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("RoleName");

                    b.HasKey("Id");

                    b.ToTable("tbBankUserRoles");
                });

            modelBuilder.Entity("Spa_Management.Models.tbBankUsers", b =>
                {
                    b.Property<Guid>("bankUserGuid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("LastName")
                        .HasMaxLength(25);

                    b.Property<string>("NationCode")
                        .HasMaxLength(5);

                    b.Property<Guid>("RoleId");

                    b.Property<string>("SirName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<Guid>("SystemBanksGuid");

                    b.Property<Guid>("addedBy");

                    b.Property<Guid>("checkedBy");

                    b.Property<string>("checkerComments")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("checkerDate");

                    b.Property<string>("contact")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<DateTime>("dob");

                    b.Property<string>("email")
                        .IsRequired();

                    b.Property<string>("gender")
                        .HasMaxLength(25);

                    b.Property<string>("idNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("idType");

                    b.Property<string>("maritalStatus");

                    b.Property<string>("pysicalLoc");

                    b.Property<DateTime>("regDate");

                    b.Property<int>("status");

                    b.Property<int?>("tbNationalitiesid");

                    b.HasKey("bankUserGuid");

                    b.HasIndex("SystemBanksGuid");

                    b.HasIndex("tbNationalitiesid");

                    b.ToTable("TbBankUsers");
                });

            modelBuilder.Entity("Spa_Management.Models.tbBeneficialies", b =>
                {
                    b.Property<Guid>("benGuid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("SirName")
                        .IsRequired();

                    b.Property<Guid>("adminUserGuid");

                    b.Property<string>("adrress")
                        .HasMaxLength(100);

                    b.Property<Guid>("compUserGuid");

                    b.Property<string>("contact")
                        .HasMaxLength(15);

                    b.Property<string>("email");

                    b.Property<Guid?>("indGuid");

                    b.Property<string>("physicalLoc")
                        .HasMaxLength(100);

                    b.HasKey("benGuid");

                    b.ToTable("TbBeneficialies");
                });

            modelBuilder.Entity("Spa_Management.Models.tbBeneficiaries", b =>
                {
                    b.Property<Guid>("institutionGuid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("contact")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("email");

                    b.Property<string>("postalAddress")
                        .IsRequired();

                    b.Property<string>("pysicalLoc")
                        .IsRequired();

                    b.Property<DateTime>("regDate");

                    b.Property<string>("registeredBy")
                        .IsRequired();

                    b.Property<int>("status");

                    b.HasKey("institutionGuid");

                    b.ToTable("TbBeneficiaries");
                });

            modelBuilder.Entity("Spa_Management.Models.tbBeneficiaryEmployees", b =>
                {
                    b.Property<Guid>("userGuid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("LastName")
                        .HasMaxLength(25);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(25);

                    b.Property<string>("NationCode")
                        .HasMaxLength(15);

                    b.Property<Guid>("RoleId");

                    b.Property<string>("SirName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("contact")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("designation")
                        .HasMaxLength(50);

                    b.Property<DateTime>("dob");

                    b.Property<string>("email")
                        .IsRequired();

                    b.Property<string>("idNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("idType");

                    b.Property<Guid>("institutionGuid");

                    b.Property<DateTime>("regDate");

                    b.Property<int>("status");

                    b.Property<int?>("tbNationalitiesid");

                    b.HasKey("userGuid");

                    b.HasIndex("institutionGuid");

                    b.HasIndex("tbNationalitiesid");

                    b.ToTable("TbBeneficiaryEmployees");
                });

            modelBuilder.Entity("Spa_Management.Models.tbBoardResolutions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("docPath")
                        .IsRequired()
                        .HasMaxLength(210);

                    b.HasKey("Id");

                    b.ToTable("TbBoardResolutions");
                });

            modelBuilder.Entity("Spa_Management.Models.tbBondProcessingActions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("BondProcessingActions");
                });

            modelBuilder.Entity("Spa_Management.Models.tbComMatrices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("FlatRate");

                    b.Property<Guid>("SystemBanksGuid");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<decimal>("perCom");

                    b.Property<string>("period");

                    b.Property<int>("status");

                    b.HasKey("Id");

                    b.HasIndex("SystemBanksGuid");

                    b.ToTable("TbComMatrices");
                });

            modelBuilder.Entity("Spa_Management.Models.tbCommisionShares", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("BankperCom");

                    b.Property<string>("FintechBankAccount")
                        .IsRequired();

                    b.Property<decimal?>("FintechperCom");

                    b.Property<decimal>("FlatRate");

                    b.Property<string>("PrimaryBankAccount")
                        .IsRequired();

                    b.Property<Guid>("SystemBanksGuid");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<decimal>("from");

                    b.Property<decimal>("perCom");

                    b.Property<string>("period");

                    b.Property<int>("status");

                    b.Property<decimal>("to");

                    b.HasKey("Id");

                    b.HasIndex("SystemBanksGuid");

                    b.ToTable("TbCommisionShares");
                });

            modelBuilder.Entity("Spa_Management.Models.tbCompanies", b =>
                {
                    b.Property<Guid>("compGuid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BankCode")
                        .HasMaxLength(50);

                    b.Property<bool>("FirstTimeUse");

                    b.Property<string>("PinNo")
                        .IsRequired();

                    b.Property<string>("PostalCode");

                    b.Property<string>("RegCertNo")
                        .IsRequired();

                    b.Property<string>("accNum");

                    b.Property<string>("branchCode")
                        .HasMaxLength(50);

                    b.Property<string>("compName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("contact")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("email");

                    b.Property<DateTime?>("incDate");

                    b.Property<string>("incNum");

                    b.Property<string>("postalAddress")
                        .IsRequired();

                    b.Property<string>("pysicalLoc")
                        .IsRequired();

                    b.Property<DateTime>("regDate");

                    b.Property<string>("registeredBy")
                        .IsRequired();

                    b.Property<int>("status");

                    b.HasKey("compGuid");

                    b.ToTable("TbCompanies");
                });

            modelBuilder.Entity("Spa_Management.Models.tbCompanyUserAccessRights", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompanyId");

                    b.Property<Guid>("MenuId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("tbCompanyUserAccessRights");
                });

            modelBuilder.Entity("Spa_Management.Models.tbCompanyUserRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompanyId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("RoleName");

                    b.HasKey("Id");

                    b.ToTable("tbCompanyUserRoles");
                });

            modelBuilder.Entity("Spa_Management.Models.tbCompanyUsers", b =>
                {
                    b.Property<Guid>("compUserGuid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("LastName")
                        .HasMaxLength(25);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(25);

                    b.Property<string>("NationCode")
                        .HasMaxLength(15);

                    b.Property<Guid>("RoleId");

                    b.Property<string>("SirName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<Guid>("compGuid");

                    b.Property<string>("contact")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("designation")
                        .HasMaxLength(50);

                    b.Property<DateTime>("dob");

                    b.Property<string>("email")
                        .IsRequired();

                    b.Property<string>("gender")
                        .HasMaxLength(25);

                    b.Property<string>("idNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("idType");

                    b.Property<string>("maritalStatus");

                    b.Property<string>("pysicalLoc");

                    b.Property<DateTime>("regDate");

                    b.Property<int>("status");

                    b.Property<int?>("tbDesignationsId");

                    b.Property<int?>("tbNationalitiesid");

                    b.HasKey("compUserGuid");

                    b.HasIndex("compGuid");

                    b.HasIndex("tbDesignationsId");

                    b.HasIndex("tbNationalitiesid");

                    b.ToTable("TbCompanyUsers");
                });

            modelBuilder.Entity("Spa_Management.Models.tbCRBChecks", b =>
                {
                    b.Property<Guid>("CRBGuid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FullName");

                    b.Property<string>("IDNumber");

                    b.Property<string>("IDNumberType");

                    b.Property<string>("TypeOfRelation");

                    b.Property<DateTime>("ValidFrom");

                    b.Property<Guid>("compGuid");

                    b.Property<DateTime>("date");

                    b.Property<string>("details");

                    b.Property<string>("inComeDetails");

                    b.Property<Guid>("indGuid");

                    b.Property<int>("score");

                    b.Property<int>("status");

                    b.HasKey("CRBGuid");

                    b.ToTable("TbCRBChecks");
                });

            modelBuilder.Entity("Spa_Management.Models.tbCurrencies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("TbCurrencies");
                });

            modelBuilder.Entity("Spa_Management.Models.tbDesignations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("designation")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TbDesignations");
                });

            modelBuilder.Entity("Spa_Management.Models.tbDirectors", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("Checker");

                    b.Property<string>("CheckerComments")
                        .HasMaxLength(500);

                    b.Property<Guid>("CompanyId");

                    b.Property<DateTime>("Dob");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("IdNumber");

                    b.Property<string>("IdType");

                    b.Property<string>("LastName");

                    b.Property<Guid>("Maker");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NationCode")
                        .HasMaxLength(15);

                    b.Property<bool>("OtpVerified");

                    b.Property<string>("TelephoneNumber");

                    b.Property<bool>("Verified");

                    b.Property<DateTime?>("checkerDate");

                    b.HasKey("Id");

                    b.ToTable("TbDirectors");
                });

            modelBuilder.Entity("Spa_Management.Models.tbDocTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Extensions")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("status");

                    b.HasKey("Id");

                    b.ToTable("TbDocTypes");
                });

            modelBuilder.Entity("Spa_Management.Models.tbDocUploadReq", b =>
                {
                    b.Property<Guid>("docReqGuid")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DocTypesId");

                    b.Property<int>("Status");

                    b.Property<Guid>("SystemBanksGuid");

                    b.Property<string>("docName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("docReqGuid");

                    b.HasIndex("DocTypesId");

                    b.HasIndex("SystemBanksGuid");

                    b.ToTable("TbDocUploadReqs");
                });

            modelBuilder.Entity("Spa_Management.Models.tbEmailLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("bcc");

                    b.Property<string>("cc");

                    b.Property<DateTime>("date");

                    b.Property<string>("from");

                    b.Property<string>("message");

                    b.Property<int>("status");

                    b.Property<string>("subject");

                    b.Property<string>("to");

                    b.HasKey("Id");

                    b.ToTable("TbEmailLogs");
                });

            modelBuilder.Entity("Spa_Management.Models.tbErrorLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("OpDate");

                    b.Property<string>("action")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("attStatus");

                    b.Property<string>("errorMessage")
                        .IsRequired();

                    b.Property<string>("innerExemption");

                    b.Property<string>("json");

                    b.Property<string>("modelValidation");

                    b.Property<string>("sessionId");

                    b.HasKey("Id");

                    b.ToTable("TbErrorLogs");
                });

            modelBuilder.Entity("Spa_Management.Models.tbFeedBacks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("message")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("phone")
                        .HasMaxLength(15);

                    b.Property<int>("status");

                    b.Property<DateTime>("time");

                    b.HasKey("Id");

                    b.ToTable("TbFeedBacks");
                });

            modelBuilder.Entity("Spa_Management.Models.tbGender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("TbGenders");
                });

            modelBuilder.Entity("Spa_Management.Models.tbIdTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("idType")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("TbIdTypes");
                });

            modelBuilder.Entity("Spa_Management.Models.tbIndivuduals", b =>
                {
                    b.Property<Guid>("indGuid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BankCode")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .HasMaxLength(25);

                    b.Property<string>("LastName")
                        .HasMaxLength(25);

                    b.Property<string>("NationCode")
                        .HasMaxLength(5);

                    b.Property<string>("SirName")
                        .HasMaxLength(25);

                    b.Property<string>("accNum");

                    b.Property<string>("branchCode")
                        .HasMaxLength(50);

                    b.Property<string>("contact")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<DateTime>("dob");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("gender")
                        .HasMaxLength(25);

                    b.Property<string>("idNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("idType")
                        .IsRequired();

                    b.Property<string>("maritalStatus");

                    b.Property<string>("pysicalLoc");

                    b.Property<DateTime>("regDate");

                    b.Property<int>("status");

                    b.Property<string>("suffix");

                    b.Property<int?>("tbGenderId");

                    b.Property<int?>("tbIdTypesId");

                    b.Property<int?>("tbMaritalStatusId");

                    b.Property<int?>("tbNationalitiesid");

                    b.Property<int?>("tbSuffixesId");

                    b.HasKey("indGuid");

                    b.HasIndex("tbGenderId");

                    b.HasIndex("tbIdTypesId");

                    b.HasIndex("tbMaritalStatusId");

                    b.HasIndex("tbNationalitiesid");

                    b.HasIndex("tbSuffixesId");

                    b.ToTable("TbIndivuduals");
                });

            modelBuilder.Entity("Spa_Management.Models.tbIPQRSChecks", b =>
                {
                    b.Property<Guid>("ipqrsGuid")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("date");

                    b.Property<string>("inComeDetails");

                    b.Property<Guid>("indGuid");

                    b.Property<int>("score");

                    b.Property<int>("status");

                    b.HasKey("ipqrsGuid");

                    b.HasIndex("indGuid");

                    b.ToTable("TbIPQRSChecks");
                });

            modelBuilder.Entity("Spa_Management.Models.tbJsonLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("json");

                    b.Property<int>("status");

                    b.Property<DateTime>("time");

                    b.HasKey("Id");

                    b.ToTable("TbJsonLogs");
                });

            modelBuilder.Entity("Spa_Management.Models.tbMaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("maritalStatus")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("TbMaritalStatuses");
                });

            modelBuilder.Entity("Spa_Management.Models.tbMenus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MenuName");

                    b.Property<string>("MenuUrl");

                    b.HasKey("Id");

                    b.ToTable("TbMenus");
                });

            modelBuilder.Entity("Spa_Management.Models.tbNationalities", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NationCode")
                        .HasMaxLength(5);

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("id");

                    b.ToTable("TbNationalities");
                });

            modelBuilder.Entity("Spa_Management.Models.tbNotifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("logDate");

                    b.Property<string>("message")
                        .IsRequired();

                    b.Property<int>("status");

                    b.Property<string>("systemID")
                        .IsRequired();

                    b.Property<int>("type");

                    b.HasKey("Id");

                    b.ToTable("TbNotifications");
                });

            modelBuilder.Entity("Spa_Management.Models.tbOtpVerify", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Otp");

                    b.Property<DateTime>("TimeLogged");

                    b.Property<bool>("Used");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Otp");
                });

            modelBuilder.Entity("Spa_Management.Models.tbPayMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("cardNumber");

                    b.Property<int>("expireMonth");

                    b.Property<int>("expireYear");

                    b.Property<string>("nameOnCard");

                    b.Property<Guid>("profGuid");

                    b.Property<int>("status");

                    b.HasKey("Id");

                    b.HasIndex("profGuid");

                    b.ToTable("TbPayMasters");
                });

            modelBuilder.Entity("Spa_Management.Models.tbPaymentRecords", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ApplicationId");

                    b.Property<Guid>("BankId");

                    b.Property<decimal>("BankShare");

                    b.Property<int>("CommisionType");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<string>("ReferenceNumber");

                    b.Property<decimal>("Spa_ManagementShare");

                    b.HasKey("Id");

                    b.ToTable("TbPaymentRecords");
                });

            modelBuilder.Entity("Spa_Management.Models.tbPayPesaLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("profGuid");

                    b.HasKey("Id");

                    b.HasIndex("profGuid");

                    b.ToTable("tbPayPesaLink");
                });

            modelBuilder.Entity("Spa_Management.Models.tbPostalCodes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Code");

                    b.Property<string>("RegionName");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("tbPostalCodes");
                });

            modelBuilder.Entity("Spa_Management.Models.tbSMSLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("message")
                        .IsRequired();

                    b.Property<DateTime>("sentDate");

                    b.Property<int>("status");

                    b.Property<string>("toPhone")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("TbSMSLogs");
                });

            modelBuilder.Entity("Spa_Management.Models.tbSuffixes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("suffix")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("TbSuffixes");
                });

            modelBuilder.Entity("Spa_Management.Models.tbSysConfigs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("status");

                    b.HasKey("Id");

                    b.ToTable("TbSysConfigs");
                });

            modelBuilder.Entity("Spa_Management.Models.tbSystemBanks", b =>
                {
                    b.Property<Guid>("SystemBanksGuid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AllowAutoGene")
                        .IsRequired();

                    b.Property<int>("BondProcessDays");

                    b.Property<decimal>("LimitBalance");

                    b.Property<decimal>("MaximumSecurityLimit");

                    b.Property<decimal>("OveralSecuringLimit");

                    b.Property<string>("bankCode")
                        .IsRequired();

                    b.Property<string>("bankName")
                        .IsRequired();

                    b.Property<DateTime>("regDate");

                    b.Property<int>("status");

                    b.HasKey("SystemBanksGuid");

                    b.ToTable("TbSystemBanks");
                });

            modelBuilder.Entity("Spa_Management.Models.tbUserProfiles", b =>
                {
                    b.Property<Guid>("profGuid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("photoPath");

                    b.Property<int>("preferedCommMethod");

                    b.Property<int>("status");

                    b.Property<string>("systemID")
                        .IsRequired();

                    b.Property<Guid>("userGuid");

                    b.Property<int>("userType");

                    b.HasKey("profGuid");

                    b.ToTable("TbUserProfiles");
                });

            modelBuilder.Entity("Spa_Management.Models.TradePawaCommissionMatrix", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CheckerId");

                    b.Property<decimal>("FlatRate");

                    b.Property<Guid>("MakerId");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<decimal>("from");

                    b.Property<decimal>("perCom");

                    b.Property<string>("period");

                    b.Property<int>("status");

                    b.Property<decimal>("to");

                    b.HasKey("Id");

                    b.ToTable("TradePawaMatrix");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Spa_Management.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Spa_Management.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Spa_Management.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Spa_Management.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Spa_Management.Models.Appointments", b =>
                {
                    b.HasOne("Spa_Management.Models.SpaCustomer", "SpaCustomers")
                        .WithMany("Appointments")
                        .HasForeignKey("SpaCustomersId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Spa_Management.Models.SpaDetails", "SpaDetails")
                        .WithMany("Appointments")
                        .HasForeignKey("SpaDetailsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Spa_Management.Models.SpaServices", "SpaServices")
                        .WithMany("Appointments")
                        .HasForeignKey("SpaServicesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Spa_Management.Models.BankAmmendmentMatrices", b =>
                {
                    b.HasOne("Spa_Management.Models.tbSystemBanks", "tbSystemBanks")
                        .WithMany("BankAmmendmentMatrices")
                        .HasForeignKey("SystemBanksGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Spa_Management.Models.CompletedJobs", b =>
                {
                    b.HasOne("Spa_Management.Models.Appointments", "Appointments")
                        .WithMany("CompletedJobs")
                        .HasForeignKey("AppointmentsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Spa_Management.Models.EmployeePay", b =>
                {
                    b.HasOne("Spa_Management.Models.SpaUsers", "SpaUsers")
                        .WithMany("EmployeePays")
                        .HasForeignKey("SpaUsersId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Spa_Management.Models.SpaRoles", b =>
                {
                    b.HasOne("Spa_Management.Models.SpaDetails", "SpaDetails")
                        .WithMany("SpaRoles")
                        .HasForeignKey("SpaDetailsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Spa_Management.Models.SpaServices", b =>
                {
                    b.HasOne("Spa_Management.Models.SpaDetails", "SpaDetails")
                        .WithMany("SpaServices")
                        .HasForeignKey("SpaDetailsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Spa_Management.Models.SpaUsers", b =>
                {
                    b.HasOne("Spa_Management.Models.SpaDetails", "SpaDetails")
                        .WithMany("SpaUsers")
                        .HasForeignKey("spaGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Spa_Management.Models.SpaRoles", "spaRoles")
                        .WithMany("SpaUsers")
                        .HasForeignKey("spaRolesId1");
                });

            modelBuilder.Entity("Spa_Management.Models.tbApplicationDocs", b =>
                {
                    b.HasOne("Spa_Management.Models.tbApplications", "tbApplications")
                        .WithMany("tbApplicationDocs")
                        .HasForeignKey("CRBGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Spa_Management.Models.tbApplications", b =>
                {
                    b.HasOne("Spa_Management.Models.tbSystemBanks", "tbSystemBanks")
                        .WithMany("tbApplications")
                        .HasForeignKey("SystemBanksGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Spa_Management.Models.tbCurrencies", "tbCurrencies")
                        .WithMany("tbApplications")
                        .HasForeignKey("tbCurrenciesId");
                });

            modelBuilder.Entity("Spa_Management.Models.tbBankBranches", b =>
                {
                    b.HasOne("Spa_Management.Models.tbSystemBanks", "tbSystemBanks")
                        .WithMany("tbBankBranches")
                        .HasForeignKey("SystemBanksGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Spa_Management.Models.tbBankUserAccessRights", b =>
                {
                    b.HasOne("Spa_Management.Models.tbBankUserRoles")
                        .WithMany("tbBankUserAccessRights")
                        .HasForeignKey("tbBankUserRolesId");
                });

            modelBuilder.Entity("Spa_Management.Models.tbBankUsers", b =>
                {
                    b.HasOne("Spa_Management.Models.tbSystemBanks", "tbSystemBanks")
                        .WithMany("tbBankUsers")
                        .HasForeignKey("SystemBanksGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Spa_Management.Models.tbNationalities", "tbNationalities")
                        .WithMany()
                        .HasForeignKey("tbNationalitiesid");
                });

            modelBuilder.Entity("Spa_Management.Models.tbBeneficiaryEmployees", b =>
                {
                    b.HasOne("Spa_Management.Models.tbBeneficiaries", "tbBeneficiaries")
                        .WithMany("TbBeneficiaryEmployees")
                        .HasForeignKey("institutionGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Spa_Management.Models.tbNationalities", "tbNationalities")
                        .WithMany()
                        .HasForeignKey("tbNationalitiesid");
                });

            modelBuilder.Entity("Spa_Management.Models.tbComMatrices", b =>
                {
                    b.HasOne("Spa_Management.Models.tbSystemBanks", "tbSystemBanks")
                        .WithMany("tbComMatrices")
                        .HasForeignKey("SystemBanksGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Spa_Management.Models.tbCommisionShares", b =>
                {
                    b.HasOne("Spa_Management.Models.tbSystemBanks", "tbSystemBanks")
                        .WithMany()
                        .HasForeignKey("SystemBanksGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Spa_Management.Models.tbCompanyUsers", b =>
                {
                    b.HasOne("Spa_Management.Models.tbCompanies", "tbCompanies")
                        .WithMany("tbCompanyUsers")
                        .HasForeignKey("compGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Spa_Management.Models.tbDesignations", "tbDesignations")
                        .WithMany("tbCompanyUsers")
                        .HasForeignKey("tbDesignationsId");

                    b.HasOne("Spa_Management.Models.tbNationalities", "tbNationalities")
                        .WithMany()
                        .HasForeignKey("tbNationalitiesid");
                });

            modelBuilder.Entity("Spa_Management.Models.tbDocUploadReq", b =>
                {
                    b.HasOne("Spa_Management.Models.tbDocTypes", "DocTypes")
                        .WithMany("tbDocUploadReq")
                        .HasForeignKey("DocTypesId");

                    b.HasOne("Spa_Management.Models.tbSystemBanks", "tbSystemBanks")
                        .WithMany("tbDocUploadReq")
                        .HasForeignKey("SystemBanksGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Spa_Management.Models.tbIndivuduals", b =>
                {
                    b.HasOne("Spa_Management.Models.tbGender", "tbGender")
                        .WithMany("tbIndivuduals")
                        .HasForeignKey("tbGenderId");

                    b.HasOne("Spa_Management.Models.tbIdTypes", "tbIdTypes")
                        .WithMany("tbIndivuduals")
                        .HasForeignKey("tbIdTypesId");

                    b.HasOne("Spa_Management.Models.tbMaritalStatus", "tbMaritalStatus")
                        .WithMany("tbIndivuduals")
                        .HasForeignKey("tbMaritalStatusId");

                    b.HasOne("Spa_Management.Models.tbNationalities", "tbNationalities")
                        .WithMany("tbIndivuduals")
                        .HasForeignKey("tbNationalitiesid");

                    b.HasOne("Spa_Management.Models.tbSuffixes", "tbSuffixes")
                        .WithMany("tbIndivuduals")
                        .HasForeignKey("tbSuffixesId");
                });

            modelBuilder.Entity("Spa_Management.Models.tbIPQRSChecks", b =>
                {
                    b.HasOne("Spa_Management.Models.tbIndivuduals", "tbIndivuduals")
                        .WithMany("tbIPQRSChecks")
                        .HasForeignKey("indGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Spa_Management.Models.tbPayMaster", b =>
                {
                    b.HasOne("Spa_Management.Models.tbUserProfiles", "tbUserProfiles")
                        .WithMany("tbPayMaster")
                        .HasForeignKey("profGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Spa_Management.Models.tbPayPesaLink", b =>
                {
                    b.HasOne("Spa_Management.Models.tbUserProfiles", "tbUserProfiles")
                        .WithMany("tbPayPesaLink")
                        .HasForeignKey("profGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
